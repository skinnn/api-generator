<div class="users">
	<div class="table-sm table-hover table-striped">
		<table class="table">
			<thead class="thead-dark">
				<tr>
					{{!-- TODO: Generate table from user properties --}}
					<th scope="col">ID</th>
					<th scope="col">Name</th>
					<th scope="col" class="schema">Schema</th>
					<th scope="col" class="created">Created</th>
					<th scope="col" class="updated">Updated</th>
					<th scope="col">Owner</th>
					<th scope="col" class="operation">Operation</th>
				</tr>
			</thead>
			<tbody id="endpointsTableBody"></tbody>
		</table>
	</div>
</div>

<div id="modal">
	<div class="modal-content" name="modal-content">	

	</div>
</div>

<script>
	var endpoints
	// Get and display endpoints
	(async function() {
		endpoints = await fetch(`${API_PATH}/endpoint`)
		.then(res => res.json())
		.then(res => {
			// console.log(res[0])
			return res
		})

		const mappedEndpoints = endpoints.map(endpoint => {
			let tr = document.createElement('tr')
			let operations

			let body = `
				<th>${endpoint._id}</th>
				<td>${endpoint.name}</td>
				<!-- <td class="schema">${JSON.stringify(endpoint._schema)}</td> -->
				<td class="schema" style="text-align: center;">
					<button onclick="viewSchema()" class="btn btn-outline-info">View</button>
				</td>
				<td class="created">${endpoint.created}</td>
				<td class="updated">${endpoint.updated ? endpoint.updated : 'Never'}</td>
				<td>${endpoint.__owner}</td>
			`
			tr.innerHTML = body

			// Dont load operations buttons for builtin endpoints
			// TODO: But implement functionality so they can be editable
			if (endpoint.name !== 'dashboard' && endpoint.name !== 'endpoint' && endpoint.name !== 'user' && endpoint.name !== 'login') {
				operations = `
					<td class="operation">
						<button type="button" class="btn btn-outline-info" data-id="${endpoint._id}" onclick="editEndpoint()">Edit</button>
						<button type="button" class="btn btn-outline-danger" data-id="${endpoint._id}" onclick="deleteEndpoint()">Delete</button>
					</td>
				`
			} else {
				operations = '<td class="operation">N/A</td>'
			}
			tr.innerHTML += operations

			return `<tr data-id="${endpoint._id}">${tr.innerHTML}</tr>`
		}).join('')
		// TODO: Create click to view schema (modal) instead of showing the whole schema in all tables
		document.getElementById('endpointsTableBody').innerHTML = mappedEndpoints
	})()

	function viewSchema() {
		event.preventDefault()
		event.stopPropagation()
		const endpointId = event.target.parentNode.parentNode.getAttribute('data-id')
		const endpoint = endpoints.find((el) => el._id === endpointId)
		const schema = endpoint._schema
		const modal = document.getElementById('modal')
		modal.classList.add('modal-show')
		modal.children[0].innerHTML = `
			<h4 style="text-align: center;">/${endpoint.name}</h4>
			<pre>${JSON.stringify(schema, null, 4)}</pre>
		`

		// Add close event listener
		document.addEventListener('click', (e) => {
			if (e.target.id === 'modal') {
				// Close modal
				modal.classList.remove('modal-show')
			}
		})
	}

	function editEndpoint() {
		const id = event.target.parentNode.parentNode.getAttribute('data-id')
		console.log('edit id: ', id)
	}

	async function deleteEndpoint() {
		const id = event.target.parentNode.parentNode.getAttribute('data-id')
		console.log('delete id: ', id)
		
		try {
			fetch(`${API_PATH}/endpoint/${id}`, {
				method: 'DELETE'
			})
				.then(res => res.json())
				.then(res => {
					console.log('deleted res: ', res)
				})
		} catch (err) {
			console.error(err)
		}
	}

</script>